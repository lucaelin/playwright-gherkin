import { PlaywrightTestArgs, PlaywrightTestOptions, PlaywrightWorkerArgs, PlaywrightWorkerOptions } from '@playwright/test';
import { Spec,Feature,  Scenario,  Step, } from './parse.js';

type PlaywrightArgs = PlaywrightTestArgs & PlaywrightTestOptions & PlaywrightWorkerArgs & PlaywrightWorkerOptions;
const playwrightArgs = ['page', 'browser', 'context', 'request'] satisfies readonly (keyof PlaywrightArgs)[];

function genStep(step: Step): string[] {
  return [
    `{ // ${JSON.stringify(step.originalText)}`,
      ...indent([
        `const table = ${step.table?`new DataTable(${JSON.stringify(step.table)})`:'undefined'};`,
        `const docString = ${JSON.stringify(step.docString)};`,
        `const expressions = ${JSON.stringify(step.expressions)}`,
        `const arg1 = {${playwrightArgs.join(', ')}, table, docString, expressions, world};`,
        `const step = await steps.find(${JSON.stringify(step)});`,
        `const timeout = new Promise((_, rej)=>setTimeout(()=>rej('Step timeout reached after '+info.timeout+'ms'), info.timeout));`,
        `await Promise.race([step(arg1, info), timeout]);`,
      ]),
    `}`,
  ]
}

function genScenario(scn: Scenario): string[] {
  const tests = scn.steps.flatMap(step=>genStep(step));
  return [
    `test(${JSON.stringify(`${scn.name} ${scn.tags.join(' ')}`.trim())}, async ({${playwrightArgs.join(', ')}}, info)=>{`,
      ...indent([
        `test.setTimeout(${scn.steps.length} * info.timeout);`,
        `const world = {};`,
        ...tests,
      ]),
    `})`,
  ];
}

function genFile(spec: Spec): string[] {
  const describes = spec.features[0].scenarios.flatMap(scn=>genScenario(scn));
  return [
    `/* DO NOT EDIT! THIS FILE WAS GENERATED BY 'playwright-gherkin'. */`,
    `import {test} from '@playwright/test';`,
    `import {DataTable} from 'playwright-gherkin';`,
    `import {steps} from './steps.js';`,
    //`validate(${JSON.stringify(uri)}, ${JSON.stringify(hash)})`,
    ``,
    `test.describe(${JSON.stringify(`${spec.features[0].name} ${spec.features[0].tags.join(' ')}`.trim())}, async ()=>{`,
      ...indent(describes),
    `})`,
  ];
}

export function generateCode(spec: Spec) {
  const lines = genFile(spec);
  return lines.join('\n');
}

function indent(content: string[]): string[] {
  return content.map(s=>'    '+s)
}
